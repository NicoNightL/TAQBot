from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.database import (
    get_user_settings,
    update_notification_setting,
    update_language_setting,
    get_current_settings_message
)
import app.keyboards as kb

router = Router()


class SearchStates(StatesGroup):
    waiting_for_search_query = State()

class SettingsStates(StatesGroup):
    waiting_for_notification_choice = State()
    waiting_for_language_choice = State()

BOT_COMMANDS = [
    ("/start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    ("/help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ("/settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø TAQBot - –±–æ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å!",
        reply_markup=kb.main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command('help'))
async def cmd_help(message: Message):
    text = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n'
    for cmd, desc in BOT_COMMANDS:
        text += f'{cmd} ‚Äî {desc}\n'
    await message.answer(text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ FAQ
@router.message(F.text.in_(['üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)', 'FAQ', 'faq']))
async def show_faq(message: Message):
    await message.answer('–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ):', reply_markup=kb.faq_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == 'back_to_main')
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ –≤–æ–ø—Ä–æ—Å–æ–≤
@router.callback_query(F.data.startswith('faq_'))
async def process_faq(callback: CallbackQuery):
    answers = {
        'faq_general': '–ó–¥–µ—Å—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã...',
        'faq_tech': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º...',
        'faq_payment': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ...',
    }
    await callback.message.answer(answers[callback.data])
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.message(F.text.in_(['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏']))
async def show_settings(message: Message):
    user_id = message.from_user.id
    settings_message = get_current_settings_message(user_id)
    await message.answer(
        f"{settings_message}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=kb.settings_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(F.text.in_(['üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']))
async def notification_settings(message: Message, state: FSMContext):
    user_id = message.from_user.id
    current = get_user_settings(user_id)['notifications']
    keyboard = kb.notifications_keyboard(current)
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=keyboard
    )
    await state.set_state(SettingsStates.waiting_for_notification_choice)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(SettingsStates.waiting_for_notification_choice)
async def process_notification_choice(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == '‚úîÔ∏è –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        update_notification_setting(user_id, True)
        await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!", reply_markup=kb.settings_keyboard())
    elif message.text == '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        update_notification_setting(user_id, False)
        await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!", reply_markup=kb.settings_keyboard())
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º':
        await show_settings(message)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")
        return
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —è–∑—ã–∫–∞
@router.message(F.text.in_(['üåê –Ø–∑—ã–∫', '–Ø–∑—ã–∫']))
async def language_settings(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        reply_markup=kb.language_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_language_choice)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@router.message(SettingsStates.waiting_for_language_choice)
async def process_language_choice(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        update_language_setting(user_id, 'ru')
        await message.answer("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π", reply_markup=kb.settings_keyboard())
    elif message.text == 'üá¨üáß English':
        update_language_setting(user_id, 'en')
        await message.answer("Language changed to English", reply_markup=kb.settings_keyboard())
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º':
        await show_settings(message)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")
        return
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text.in_(['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']))
async def back_to_main(message: Message):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=kb.main_keyboard()
    )


