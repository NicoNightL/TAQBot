from aiogram import Router, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode

from app.database import (
    DATABASE,
    BOT_COMMANDS,
    get_user_settings,
    update_notification_setting,
    update_language_setting,
    get_current_settings_message
)
import app.keyboards as kb

router = Router()


class SearchStates(StatesGroup):
    waiting_for_search_query = State()


class SettingsStates(StatesGroup):
    waiting_for_notification_choice = State()
    waiting_for_language_choice = State()


class FAQStates(StatesGroup):
    waiting_for_theme_selection = State()
    waiting_for_question_selection = State()


# –ö–û–ú–ê–ù–î–´

@router.message(CommandStart())
async def cmd_start(message: Message):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 
    –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.'''
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø TAQBot - –±–æ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n'
        '–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å!',
        reply_markup=kb.main_keyboard()
    )


@router.message(Command('help'))
async def cmd_help(message: Message):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help. –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.'''
    text = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n'
    for cmd, desc in BOT_COMMANDS:
        text += f'{cmd} ‚Äî {desc}\n'
    await message.answer(text)


# –°–ò–°–¢–ï–ú–ê FAQ (–ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´)

@router.message(F.text.in_(['üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)', 'FAQ', 'faq']))
async def show_faq(message: Message, state: FSMContext):
    '''–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º FAQ.'''
    await state.set_state(FAQStates.waiting_for_theme_selection)
    await message.answer(
        'üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:',
        reply_markup=kb.faq_themes_keyboard()
    )


@router.callback_query(F.data.startswith('faq_theme_'))
async def show_questions(callback: CallbackQuery, state: FSMContext):
    '''–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ FAQ.'''
    theme = callback.data.replace('faq_theme_', '')
    await state.update_data(current_theme=theme)
    await state.set_state(FAQStates.waiting_for_question_selection)

    await callback.message.edit_text(
        f'üìñ –¢–µ–º–∞: {theme}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:',
        reply_markup=kb.faq_questions_keyboard(theme)
    )
    await callback.answer()


@router.callback_query(FAQStates.waiting_for_question_selection, F.data.startswith('faq_id_'))
async def show_answer(callback: CallbackQuery, state: FSMContext):
    '''–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å FAQ. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç
    –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤–æ–ø—Ä–æ—Å–∞–º.'''
    question_id = int(callback.data.replace('faq_id_', ''))
    user_data = await state.get_data()
    theme = user_data.get('current_theme', '')

    question = next(
        (q for q in DATABASE if q['id'] == question_id and q['theme'] == theme), None)

    if not question:
        await callback.answer('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!', show_alert=True)
        return

    await callback.message.edit_text(
        f'üìå <b>–¢–µ–º–∞:</b> {question['theme']}\n\n'
        f'‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> {question['question']}\n\n'
        f'üí° <b>–û—Ç–≤–µ—Ç:</b> {question['answer']}',
        parse_mode=ParseMode.HTML,
        reply_markup=kb.back_to_questions_keyboard(theme)
    )
    await callback.answer()


@router.callback_query(F.data == 'back_to_faq')
async def back_to_faq(callback: CallbackQuery, state: FSMContext):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º FAQ.'''
    await state.set_state(FAQStates.waiting_for_theme_selection)
    await callback.message.edit_text(
        'üìö –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:',
        reply_markup=kb.faq_themes_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == 'back_to_main')
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'''
    await state.clear()
    await callback.message.edit_text(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=kb.main_keyboard()
    )
    await callback.answer()


# –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ö

@router.message(F.text.in_(['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏']))
async def show_settings(message: Message):
    '''–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è.'''
    user_id = message.from_user.id
    settings_message = get_current_settings_message(user_id)
    await message.answer(
        f'{settings_message}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:',
        reply_markup=kb.settings_keyboard()
    )


@router.message(F.text.in_(['üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']))
async def notification_settings(message: Message, state: FSMContext):
    '''–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.'''
    user_id = message.from_user.id
    current = get_user_settings(user_id)['notifications']
    keyboard = kb.notifications_keyboard(current)
    await message.answer(
        '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:',
        reply_markup=keyboard
    )
    await state.set_state(SettingsStates.waiting_for_notification_choice)


@router.message(SettingsStates.waiting_for_notification_choice)
async def process_notification_choice(message: Message, state: FSMContext):
    '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º. –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫'''
    user_id = message.from_user.id
    if message.text == '‚úîÔ∏è –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        update_notification_setting(user_id, True)
        await message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!', reply_markup=kb.settings_keyboard())
    elif message.text == '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        update_notification_setting(user_id, False)
        await message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!', reply_markup=kb.settings_keyboard())
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º':
        await show_settings(message)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é')
        return
    await state.clear()


@router.message(F.text.in_(['üåê –Ø–∑—ã–∫', '–Ø–∑—ã–∫']))
async def language_settings(message: Message, state: FSMContext):
    '''–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.'''
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        reply_markup=kb.language_keyboard()
    )
    await state.set_state(SettingsStates.waiting_for_language_choice)


@router.message(SettingsStates.waiting_for_language_choice)
async def process_language_choice(message: Message, state: FSMContext):
    '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞. –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.'''
    user_id = message.from_user.id
    if message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        update_language_setting(user_id, 'ru')
        await message.answer('–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π', reply_markup=kb.settings_keyboard())
    elif message.text == 'üá¨üáß English':
        update_language_setting(user_id, 'en')
        await message.answer('Language changed to English', reply_markup=kb.settings_keyboard())
    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º':
        await show_settings(message)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é')
        return
    await state.clear()


@router.message(F.text.in_(['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']))
async def back_to_main(message: Message):
    '''–¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'''
    await message.answer(
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=kb.main_keyboard()
    )


# –°–ò–°–¢–ï–ú–ê –ü–û–ò–°–ö–ê

@router.message(F.text.in_(['üîé –ü–æ–∏—Å–∫', '–ü–æ–∏—Å–∫']))
async def start_search(message: Message, state: FSMContext):
    '''–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞'''
    await message.answer(
        'üîç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:',
        reply_markup=kb.search_keyboard()
    )
    await state.set_state(SearchStates.waiting_for_search_query)


@router.message(StateFilter(SearchStates.waiting_for_search_query), F.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫')
async def cancel_search(message: Message, state: FSMContext):
    '''–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞. –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'''
    await message.answer(
        '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω',
        reply_markup=kb.main_keyboard()
    )
    await state.clear()
